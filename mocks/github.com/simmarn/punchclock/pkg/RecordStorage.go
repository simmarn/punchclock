// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	punchclock "github.com/simmarn/punchclock/pkg"
	mock "github.com/stretchr/testify/mock"
)

// RecordStorage is an autogenerated mock type for the RecordStorage type
type RecordStorage struct {
	mock.Mock
}

type RecordStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *RecordStorage) EXPECT() *RecordStorage_Expecter {
	return &RecordStorage_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields:
func (_m *RecordStorage) Load() ([]punchclock.WorkDayRecord, error) {
	ret := _m.Called()

	var r0 []punchclock.WorkDayRecord
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]punchclock.WorkDayRecord, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []punchclock.WorkDayRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]punchclock.WorkDayRecord)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordStorage_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type RecordStorage_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *RecordStorage_Expecter) Load() *RecordStorage_Load_Call {
	return &RecordStorage_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *RecordStorage_Load_Call) Run(run func()) *RecordStorage_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RecordStorage_Load_Call) Return(_a0 []punchclock.WorkDayRecord, _a1 error) *RecordStorage_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecordStorage_Load_Call) RunAndReturn(run func() ([]punchclock.WorkDayRecord, error)) *RecordStorage_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: records
func (_m *RecordStorage) Save(records []punchclock.WorkDayRecord) error {
	ret := _m.Called(records)

	var r0 error
	if rf, ok := ret.Get(0).(func([]punchclock.WorkDayRecord) error); ok {
		r0 = rf(records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RecordStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - records []punchclock.WorkDayRecord
func (_e *RecordStorage_Expecter) Save(records interface{}) *RecordStorage_Save_Call {
	return &RecordStorage_Save_Call{Call: _e.mock.On("Save", records)}
}

func (_c *RecordStorage_Save_Call) Run(run func(records []punchclock.WorkDayRecord)) *RecordStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]punchclock.WorkDayRecord))
	})
	return _c
}

func (_c *RecordStorage_Save_Call) Return(_a0 error) *RecordStorage_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordStorage_Save_Call) RunAndReturn(run func([]punchclock.WorkDayRecord) error) *RecordStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecordStorage creates a new instance of RecordStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordStorage {
	mock := &RecordStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
