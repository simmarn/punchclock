// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	punchclock "github.com/simmarn/punchclock/pkg"
	mock "github.com/stretchr/testify/mock"
)

// RecordStorage is an autogenerated mock type for the RecordStorage type
type RecordStorage struct {
	mock.Mock
}

// Load provides a mock function with given fields:
func (_m *RecordStorage) Load() ([]punchclock.WorkDayRecord, error) {
	ret := _m.Called()

	var r0 []punchclock.WorkDayRecord
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]punchclock.WorkDayRecord, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []punchclock.WorkDayRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]punchclock.WorkDayRecord)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: records
func (_m *RecordStorage) Save(records []punchclock.WorkDayRecord) error {
	ret := _m.Called(records)

	var r0 error
	if rf, ok := ret.Get(0).(func([]punchclock.WorkDayRecord) error); ok {
		r0 = rf(records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecordStorage creates a new instance of RecordStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordStorage {
	mock := &RecordStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
