// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PrefHandler is an autogenerated mock type for the PrefHandler type
type PrefHandler struct {
	mock.Mock
}

// GetBool provides a mock function with given fields: _a0
func (_m *PrefHandler) GetBool(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetString provides a mock function with given fields: _a0
func (_m *PrefHandler) GetString(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetBool provides a mock function with given fields: _a0, _a1
func (_m *PrefHandler) SetBool(_a0 string, _a1 bool) {
	_m.Called(_a0, _a1)
}

// SetString provides a mock function with given fields: _a0, _a1
func (_m *PrefHandler) SetString(_a0 string, _a1 string) {
	_m.Called(_a0, _a1)
}

// NewPrefHandler creates a new instance of PrefHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrefHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrefHandler {
	mock := &PrefHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
